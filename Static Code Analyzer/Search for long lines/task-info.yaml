type: edu
files:
- name: analyzer/code_analyzer.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/multiple_long_lines.py
  visible: false
  text: |
    print('What\'s your name?')
    name = input()
    print(f'Hello, {name}')  # here is an obvious comment: this prints greeting with a name

    very_big_number = 11_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
    print(very_big_number)
  learner_created: false
- name: test/single_line_valid_example.py
  visible: false
  text: |
    print('Hello, World')
  learner_created: false
- name: test/single_long_line_example.py
  visible: false
  text: |
    print('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!')
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase


    class AnalyzerTest(StageTest):
        def generate(self) -> List[TestCase]:
            return [TestCase(stdin="test/single_line_valid_example.py", attach=1),
                    TestCase(stdin="test/single_long_line_example.py", attach=2),
                    TestCase(stdin="test/multiple_long_lines.py", attach=3)]

        def test_1(self, output):
            if output != "":
                return CheckResult.wrong("Your program warned a style error in the correct file."
                                         "There was no any rows with string length more than 79 symbols.")
            return CheckResult.correct()

        def test_2(self, output: str):
            output = output.strip().lower().splitlines()
            if not len(output) == 1:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn only about one mistake")
            if not output[0].startswith("line 1: s001"):
                return CheckResult.wrong("Incorrect format of the warning message.")
            return CheckResult.correct()

        def test_3(self, output: str):
            output = output.strip().lower().splitlines()
            if not len(output) == 2:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about two mistakes in this test case")
            if not output[0].startswith("line 3: s001"):
                return CheckResult.wrong("Incorrect format of the warning message.")
            if not output[1].startswith("line 5: s001"):
                return CheckResult.wrong("Incorrect format of the warning message.")
            return CheckResult.correct()

        def check(self, reply: str, attach) -> CheckResult:
            if attach == 1:
                output = self.test_1(reply)
            elif attach == 2:
                output = self.test_2(reply)
            elif attach == 3:
                output = self.test_3(reply)
            else:
                return CheckResult.wrong("Unknown error")

            return output


    if __name__ == '__main__':
        AnalyzerTest("analyzer.code_analyzer").run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import AnalyzerTest

    if __name__ == '__main__':    AnalyzerTest("analyzer.code_analyzer").run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/9903#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 24 Aug 2023 12:20:56 UTC"
record: 1
